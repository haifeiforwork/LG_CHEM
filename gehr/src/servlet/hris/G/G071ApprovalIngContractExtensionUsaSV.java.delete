/********************************************************************************/
/*	  System Name  	: g-HR                                                														
/*   1Depth Name		: HR Approval Box  
/*   2Depth Name  	: Approving Document                                             
/*   Program Name 	: Contract Extension                                              
/*   Program ID   		: G071ApprovalIngContractExtensionUsaSV.java                                               
/*   Description  		: Contract Extension 결재 진행중 문서 Class                         
/*   Note         		:                                                            
/*   Creation     		: 2010-10-13 jungin @v1.0 Contract Extension 신규 개발
/*							: 2010-12-15 jungin @v1.1 Contract Extension 업무의 메일 수신자 변경 처리
/*																 (대상자(Emp.)가 아닌 대리신청자 (Part, Team Leader)임.)
/********************************************************************************/

package servlet.hris.G;

import com.sns.jdf.BusinessException;
import com.sns.jdf.GeneralException;
import com.sns.jdf.Logger;
import com.sns.jdf.db.DBUtil;
import com.sns.jdf.servlet.Box;
import com.sns.jdf.servlet.EHRBaseServlet;
import com.sns.jdf.util.DataUtil;
import com.sns.jdf.util.WebUtil;
import hris.D.D09ContractExtension.D09CurrentDataUsa;
import hris.D.D09ContractExtension.D09ExtensionDataUsa;
import hris.D.D09ContractExtension.rfc.D09ContractExtensionRFC;
import hris.G.ApprovalReturnState;
import hris.G.rfc.G001ApprovalProcessRFC;
import hris.common.*;
import hris.common.rfc.PersInfoWithNoRFC;
import hris.common.rfc.PhoneNumRFC;
import hris.common.util.AppUtilEurp;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.sql.Connection;
import java.util.Properties;
import java.util.Vector;
/**
 * 
 * G071ApprovalIngContractExtensionSV 
 * 
 * @author jungin
 * @creation 2010/10/13
 */
public class G071ApprovalIngContractExtensionUsaSV extends EHRBaseServlet {
	protected void performTask(HttpServletRequest req, HttpServletResponse res)
			throws GeneralException {
		Connection con = null;
		
		try {
			HttpSession session = req.getSession(false);
			
			WebUserData user = (WebUserData) session.getAttribute("user");

            Vector vcAppLineData;
            
            Vector D09ContractExtensionData_vt;
            Vector D09ExtensionDataUsa_vt;
            Vector D09CurrentDataUsa_vt;
            
            D09ExtensionDataUsa d09ExtensionData;
            D09CurrentDataUsa d09CurrentData;

			String dest = "";
			String jobid = "";

			Box box = WebUtil.getBox(req);

			String AINF_SEQN = box.get("AINF_SEQN");
			String empNo = req.getParameter("APPL_PERNR");

			// 처리 후 돌아 갈 페이지
			String RequestPageName = box.get("RequestPageName");
			req.setAttribute("RequestPageName", RequestPageName);

			jobid = box.get("jobid");
			if (jobid == null || jobid.equals("")) {
				jobid = "search";
			}// end if

            String I_DATLO = DataUtil.getCurrentDate();
            
			if (jobid.equals("search")) {
				
            	D09ContractExtensionRFC rfc = new D09ContractExtensionRFC();
                
            	D09ContractExtensionData_vt = rfc.getDetail(empNo, I_DATLO, AINF_SEQN);
                //Logger.debug.println(this, "#####	D09ContractExtensionData_vt : " + D09ContractExtensionData_vt.toString());

				if (D09ContractExtensionData_vt.size() < 1) {
					String msg = "System Error! \n\n 조회할 항목이 없습니다.";
					
					req.setAttribute("msg", msg);
					
					dest = WebUtil.JspURL + "common/caution.jsp";
					
				} else {
                    // 계약연장 정보
                	D09CurrentDataUsa_vt = (Vector)D09ContractExtensionData_vt.get(0);
                	D09ExtensionDataUsa_vt = (Vector)D09ContractExtensionData_vt.get(1);
                	
                    // 결재자 정보
                    vcAppLineData = AppUtilEurp.getAppChangeVt(AINF_SEQN);

                    D09CurrentDataUsa ceCurrent = (D09CurrentDataUsa)D09CurrentDataUsa_vt.get(0);
                    D09ExtensionDataUsa ceExtension = (D09ExtensionDataUsa)D09ExtensionDataUsa_vt.get(0);

                    Logger.debug.println(this, "#####	D09CurrentDataUsa_vt : " + D09CurrentDataUsa_vt);
                    Logger.debug.println(this, "#####	D09ExtensionDataUsa_vt : " + D09ExtensionDataUsa_vt);
					
                    PersInfoWithNoRFC piRfc = new PersInfoWithNoRFC();
                    PersInfoData pid = (PersInfoData) piRfc.getApproval(ceExtension.PERNR).get(0);
             
                    req.setAttribute("PersInfoData", pid);
					
					req.setAttribute("ceCurrent", ceCurrent);
					req.setAttribute("ceExtension", ceExtension);
					req.setAttribute("vcAppLineData", vcAppLineData);

					dest = WebUtil.JspURL + "G/G071ApprovalIngContractExtensionUsa.jsp.delete";
					
				} // end if

			} else if (jobid.equals("save")) {

            	d09ExtensionData = new D09ExtensionDataUsa();
                D09ContractExtensionData_vt = new Vector();

				vcAppLineData = new Vector();

				AppLineData tempAppLine;

				Vector vcTempAppLineData = new Vector();
				AppLineData appLine = new AppLineData();
				
                d09ExtensionData.UNAME = user.empNo;
                d09ExtensionData.AEDTM = DataUtil.getCurrentDate();
                
                box.copyToEntity(d09ExtensionData);
				AINF_SEQN = box.get("AINF_SEQN");
				
				// 결재자 정보
				int nRowCount = Integer.parseInt(box.getString("RowCount"));

				String APPU_TYPE = box.get("APPU_TYPE");
				String APPR_SEQN = box.get("APPR_SEQN");

				for (int i = 0; i < nRowCount; i++) {
					tempAppLine = new AppLineData();
					box.copyToEntity(tempAppLine, i);
					vcTempAppLineData.add(tempAppLine);

					if (tempAppLine.APPL_APPU_TYPE.equals(APPU_TYPE) && tempAppLine.APPL_APPR_SEQN.equals(APPR_SEQN)) {
						appLine.APPL_BUKRS = box.getString("BUKRS");
						appLine.APPL_PERNR = box.getString("PERNR");
						appLine.APPL_BEGDA = box.getString("BEGDA");
						appLine.APPL_AINF_SEQN = box.getString("AINF_SEQN");
						appLine.APPL_APPU_TYPE = APPU_TYPE;
						appLine.APPL_APPR_SEQN = APPR_SEQN;
						appLine.APPL_APPU_NUMB = user.empNo;
						appLine.APPL_APPR_STAT = box.getString("APPR_STAT");
						appLine.APPL_BIGO_TEXT = box.getString("BIGO_TEXT");
						appLine.APPL_APPR_DATE = DataUtil.getCurrentDate();
					} // end if
				} // end for

				vcAppLineData.add(appLine);

				D09ContractExtensionData_vt.add(d09ExtensionData);
				
				G001ApprovalProcessRFC Apr = new G001ApprovalProcessRFC();
				Vector vcRet = Apr.setApprovalStatutsList(vcAppLineData, "T_ZHR0241T", D09ContractExtensionData_vt);
                //Logger.debug.println(this ,"#####	vcRet : " + vcRet);

				ApprovalReturnState ars = (ApprovalReturnState) vcRet.get(0);

				PhoneNumRFC numfunc = new PhoneNumRFC();
				PhoneNumData phonenumdata;
				phonenumdata = (PhoneNumData) numfunc.getPhoneNum(d09ExtensionData.PERNR);

                Properties ptMailBody = new Properties();
                
                ptMailBody.setProperty("SServer", user.SServer);                 		// ElOffice 접속 서버
                ptMailBody.setProperty("from_empNo", user.empNo);               	// 멜 발송자 사번
                ptMailBody.setProperty("ename", phonenumdata.E_ENAME);			// (피)신청자명 
                ptMailBody.setProperty("empno", phonenumdata.E_PERNR);        	// (피)신청자 사번
                ptMailBody.setProperty("UPMU_NAME", "Contract Extension");      // 문서 이름
                ptMailBody.setProperty("AINF_SEQN", AINF_SEQN);                 	// 신청서 순번

				// 멜 제목
				StringBuffer sbSubject = new StringBuffer(512);

				sbSubject.append("[" + ptMailBody.getProperty("UPMU_NAME") + "] ");
				sbSubject.append(user.ename + " ");

				String msg;
				String msg2 = "";
				
                // 계약연장 신청 업무의 메일 수신자는 대상자(Emp.)가 아닌 대리신청자 (Part, Team Leader)	@v1.1
                String to_empNo = d09ExtensionData.ZPERNR;
				
				int toGubun = 0;	//메일 수신자 구분값.

				if (ars.E_RETURN.equals("S")) {
					if (appLine.APPL_APPR_STAT.equals("A")) {
						msg = "msg009";
						for (int i = 0; i < vcTempAppLineData.size(); i++) {
							tempAppLine = (AppLineData) vcTempAppLineData.get(i);
							if (tempAppLine.APPL_APPU_TYPE.equals(APPU_TYPE)
									&& tempAppLine.APPL_APPR_SEQN.equals(APPR_SEQN)) {
								if (i == vcTempAppLineData.size() - 1) {
                                    // 마직막 결재자
                                	toGubun = i;
                                	
                                	//최종결제 완료 후 신청자에게 메일발송.
                                    ptMailBody.setProperty("FileName" ,"NoticeMail2.html");
                                    sbSubject.append("approved " + ptMailBody.getProperty("UPMU_NAME") + ".");
                                    
            	                    ptMailBody.setProperty("to_empNo" ,to_empNo);                   // 멜 수신자 사번
            	                    ptMailBody.setProperty("subject" ,sbSubject.toString());        // 멜 제목 설정
            	                    
            	                    MailSendToEloffic   maTe = new MailSendToEloffic(ptMailBody);
            	                    
            	                    if (!maTe.process()) {
            	                        msg2 = maTe.getMessage() + "\\n";
            	                    } // end if
            	                    
								} else {
									// 이후 결재자
									tempAppLine = (AppLineData) vcTempAppLineData.get(i + 1);
									to_empNo = tempAppLine.APPL_APPU_NUMB;
									sbSubject.append("asked for an approval.");
									break;
								} // end if
							} else {

							} // end if
						} // end for
						
                    } else {
                        msg = "msg010";
                        
                        /*
                        if (APPU_TYPE.equals("02") && Integer.parseInt(APPR_SEQN) > 1) {
                            for (int i = 0; i < vcTempAppLineData.size(); i++) {
                                tempAppLine = (AppLineData) vcTempAppLineData.get(i);
                                if (tempAppLine.APPL_APPU_TYPE.equals("02") && tempAppLine.APPL_APPR_SEQN.equals("01")) {
                                    tempAppLine = (AppLineData) vcTempAppLineData.get(i);
                                    to_empNo = tempAppLine.APPL_APPU_NUMB;
                                } // end if
                            } // end for
                        } // end if
                        */
                        
                        //결제반려시에는 결제순서에 상관없이 신청자에게 메일발송.
                        ptMailBody.setProperty("FileName" ,"NoticeMail3.html");
                        sbSubject.append("rejected " + ptMailBody.getProperty("UPMU_NAME") + ".");
                        
	                    ptMailBody.setProperty("to_empNo" ,to_empNo);                   // 멜 수신자 사번
	                    ptMailBody.setProperty("subject" ,sbSubject.toString());        // 멜 제목 설정
	                    
	                    MailSendToEloffic   maTe = new MailSendToEloffic(ptMailBody);
	                    
	                    if (!maTe.process()) {
	                        msg2 = maTe.getMessage() + "\\n";
	                    } // end if

                    } // end if

					try {
						DraftDocForEloffice ddfe = new DraftDocForEloffice();
						ElofficInterfaceData eof;

						if (appLine.APPL_APPR_STAT.equals("A")) {
							eof = ddfe.makeDocContents(AINF_SEQN, user.SServer, ptMailBody.getProperty("UPMU_NAME"));
						} else {
							if (APPU_TYPE.equals("02")
									&& Integer.parseInt(APPR_SEQN) > 1) {
								eof = ddfe.makeDocForMangerReject(AINF_SEQN, user.SServer, ptMailBody.getProperty("UPMU_NAME"), vcTempAppLineData);
								
							} else {
								int nRejectLength = 0;
								for (int i = vcTempAppLineData.size() - 1; i >= 0; i--) {
									tempAppLine = (AppLineData) vcTempAppLineData.get(i);
									if (tempAppLine.APPL_APPU_TYPE.equals(APPU_TYPE)
											&& tempAppLine.APPL_APPR_SEQN.equals(APPR_SEQN)) {
										nRejectLength = i + 1;
										break;
									} // end if
								} // end for

								String approvers[] = new String[nRejectLength];
								for (int i = 0; i < approvers.length; i++) {
									tempAppLine = (AppLineData) vcTempAppLineData.get(i);
									approvers[i] = tempAppLine.APPL_APPU_NUMB;
								} // end for
								eof = ddfe.makeDocForReject(AINF_SEQN, user.SServer, ptMailBody.getProperty("UPMU_NAME"), d09ExtensionData.PERNR, approvers);
							} // end if
						} // end if

						Vector vcElofficInterfaceData = new Vector();
						vcElofficInterfaceData.add(eof);
						
						req.setAttribute("vcElofficInterfaceData", vcElofficInterfaceData);
						
						dest = WebUtil.JspURL + "common/ElOfficeInterface.jsp";
						
					} catch (Exception e) {
						dest = WebUtil.JspURL + "common/msg.jsp";
						msg2 = msg2 + " Eloffic Connection Failed. ";
					} // end try
					
				} else {
					msg = ars.E_MESSAGE;
					dest = WebUtil.JspURL + "common/msg.jsp";
				} // end if

				String url = "location.href = \"" + RequestPageName.replace('|', '&') + "\";";

				req.setAttribute("msg", msg);
				req.setAttribute("msg2", msg2);
				req.setAttribute("url", url);

			} else {
				throw new BusinessException("#####	내부명령(jobid)이 올바르지 않습니다.");
			} // end if

			Logger.debug.println(this, "#####	dest = " + dest);
			
			printJspPage(req, res, dest);

		} catch (Exception e) {
			Logger.err.println(DataUtil.getStackTrace(e));
			throw new GeneralException(e);
		} finally {
			DBUtil.close(con);
		}
	}
	
}
